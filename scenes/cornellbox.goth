#!/usr/bin/env igloo
from igloo import *

# set up a unit square we can use for the walls of the box
# four vertices
# then two triangles
# this square lies in the xz plane and points 'up'
unitSquare = ([-0.5, 0,  0.5,
                0.5, 0,  0.5,
                0.5, 0, -0.5,
               -0.5, 0, -0.5],
              [   0, 1,  3,
                  1, 2,  3])

# let's start describing geometry

# back wall

# first 'bind a shader'
# the name is matte, and it has one parameter, 'Kd', the diffuse color.
# The value of the parameter, in this case, grey, should immediately follow the parameter name.
Material('matte', 'Kd', (0.8, 0.8, 0.8))

# push a matrix onto the stack -- this works just like OpenGL
PushMatrix()

# translate the square 'back'
Translate(0, 0, -1)

# rotate the square so it faces the 'front'
Rotate(90, 1, 0, 0)

# scale the square so it is two units across
Scale(2.0,2.0,2.0)

# now send the square's geometry to gotham using the mesh() command
Mesh(unitSquare[0], unitSquare[1])

# now pop the matrix off the stack
PopMatrix()


# the other walls are instantiated similarly

# floor
Material('matte', 'Kd', (0.8, 0.8, 0.8))
PushMatrix()
Translate(0,-1,0)
Scale(2.0, 2.0, 2.0)
Mesh(unitSquare[0], unitSquare[1])
PopMatrix()

# ceiling
Material('matte', 'Kd', (0.8, 0.8, 0.8))
PushMatrix()
Translate(0,1,0)
Scale(2.0, 2.0, 2.0)
Rotate(180.0, 1.0, 0, 0)
Mesh(unitSquare[0], unitSquare[1])
PopMatrix()

# left wall
Material('matte', 'Kd', (0.8, 0.2, 0.2))
PushMatrix()
Translate(-1,0,0)
Scale(2.0, 2.0, 2.0)
Rotate(-90, 0, 0, 1)
Mesh(unitSquare[0], unitSquare[1])
PopMatrix()

# right wall
Material('matte', 'Kd', (0.2, 0.8, 0.2))
PushMatrix()
Translate(1,0,0)
Scale(2.0, 2.0, 2.0)
Rotate(90, 0, 0, 1)
Mesh(unitSquare[0], unitSquare[1])
PopMatrix()


# create a light source
# to do this, we will use a shader which emits light and make a square-shaped mesh

# light
# use the 'light' shader: this one needs to know how bright it is, and what color it is as well
# the parameter controlling 'brightness' is named power
Material('light', 'power', (20,20,20))
PushMatrix()
Translate(0, 0.95, 0)
Scale(0.5, 0.5, 0.5)
Rotate(180.0, 1.0, 0, 0)
Mesh(unitSquare[0], unitSquare[1])
PopMatrix()

# make some shiny spheres

# mirror ball
# the mirror shader needs to know how reflective it is
Material('mirror', 'Kr', (1.0, 1.0, 1.0))

# make a ball using the 'sphere' command
# this command takes 4 arguments:
# the x, y, and z coordinates of the sphere's center and the length of its radius
Sphere(-0.4, -0.66, -0.15, 0.33)

# glass ball
# the glass shader needs to know three things:
# how reflective it is (as a color)
# how transmissive it is (as a color)
# and an index of refraction (actual glass's index is around 1.5)
Material('perfectglass', 'Kr', (1.0, 1.0, 1.0), 'Kt', (1.0, 1.0, 1.0), 'eta', 1.5)
Sphere(0.4,-0.66,0.25,0.33)

# let's render to a 512x512 image
(w,h) = (512,512)
Attribute("record:width",  w)
Attribute("record:height", h)

# finally we need to set up the camera
# first push a matrix
PushMatrix()

# position the center of the camera's aperture (this of this as the eye) at (0,0,3.0)
# look at the point (0,0,-1) in the middle of the back wall of the cornell box
# consider the direction (0,1,0) as 'up'
# the semantics of this call is identical to OpenGL's glLookAt()
LookAt( (0,0,3.0), (0,0,-1), (0,1,0) )

# now instantiate a camera
# this call takes three arguments
# the aspect ratio of the image
# the vertical field of view in degrees
# and the distance to the near plane
Camera(float(w) / h, 60.0, 0.01)

# clean up the matrix stack
PopMatrix()

# use 4x4 samples per pixel
Attribute("renderer:spp", 4)

# finally, tell gotham to render
Render()

